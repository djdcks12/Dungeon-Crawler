# 하드코어 던전 크롤러 완전 개발 가이드

## 프로젝트 개요

### 게임 기본 정보
- **제목**: 하드코어 던전 크롤러
- **장르**: 2D 탑뷰 로그라이크 액션 RPG
- **엔진**: Unity 6 LTS (Small Size Multi Complete 템플릿)
- **네트워킹**: Unity Netcode for GameObjects
- **최대 레벨**: 15
- **파티 최대 인원**: 16명
- **던전 총 층수**: 10층 (+ 히든 11층)

### 핵심 하드코어 특징
- **완전한 데스 페널티**: 죽으면 캐릭터 삭제, 모든 진행도 소실
- **영혼 시스템**: 유일한 영구 진행도 (0.1% 드롭률)
- **PvP 시스템**: 던전 내 언제든 플레이어 간 전투 가능
- **골드 기반 스킬**: 스킬 포인트 없음, 골드로 스킬 구매
- **극악의 드롭률**: 영혼 0.1%, 인챈트 1%

---

## AI 작업 룰 (.clauderules 파일)

```markdown
# AI 작업 룰 (Claude Code 가이드라인)

## 프로젝트 개요
- **게임**: 하드코어 던전 크롤러
- **엔진**: Unity 6 LTS
- **템플릿**: Small Size Multi Complete
- **네트워킹**: Unity Netcode for GameObjects
- **언어**: C#

## 작업 요청 포맷

### 기본 템플릿
```
[시스템명] [작업타입] - [구체적 요구사항]

**컨텍스트**: 
- 관련 시스템: [연관 시스템들]
- 데이터 구조: [사용할 데이터]
- 네트워킹: [동기화 필요 여부]

**요구사항**:
1. [구체적 기능 1]
2. [구체적 기능 2]

**제약조건**:
- [성능/메모리 제약]
- [멀티플레이어 고려사항]

**테스트 케이스**:
- [예상 시나리오 1]
- [예상 시나리오 2]
```

## 코드 작성 규칙

### 네이밍 컨벤션
```csharp
// 클래스: PascalCase
public class PlayerController : NetworkBehaviour

// 메서드: PascalCase
public void TakeDamage(float amount)

// 필드/프로퍼티: PascalCase
public float MaxHealth { get; set; }
private float currentHealth;

// 상수: UPPER_SNAKE_CASE
public const float SOUL_DROP_RATE = 0.001f;

// 이벤트: On + 동작
public event Action<float> OnHealthChanged;
```

### 필수 구현 패턴
```csharp
// 1. 모든 게임플레이 클래스는 NetworkBehaviour 상속 고려
public class GameplayClass : NetworkBehaviour
{
    [SerializeField] private NetworkVariable<float> networkValue;
    
    // 2. 초기화는 생성자가 아닌 Start/Awake 사용
    private void Awake() { }
    private void Start() { }
    
    // 3. 네트워크 동기화가 필요한 메서드는 [ServerRpc] 또는 [ClientRpc]
    [ServerRpc(RequireOwnership = false)]
    private void SomeServerRpc() { }
    
    // 4. 이벤트 기반 시스템 활용
    public event Action<EventArgs> OnSomethingHappened;
}
```

### 핵심 데이터 구조
```csharp
[Serializable]
public struct StatBlock
{
    public int strength;    // 힘
    public int agility;     // 민첩
    public int vitality;    // 체력
    public int intelligence; // 마력
    public int defense;     // 물리방어
    public int magicDefense; // 마법방어
    public int luck;        // 운
}

[Serializable]
public struct ElementalStats
{
    public float fireAttack, fireResist;
    public float iceAttack, iceResist;
    public float lightningAttack, lightningResist;
    public float poisonAttack, poisonResist;
    public float darkAttack, darkResist;
    public float holyAttack, holyResist;
}

public enum Race
{
    Human,    // 균형형
    Elf,      // 마법 특화
    Beast,    // 물리 특화
    Machina   // 방어 특화
}
```

## 게임 특화 요구사항

### 하드코어 시스템
- **데스 페널티**: 죽으면 캐릭터 완전 삭제
- **드롭률**: 영혼 0.1%, 인챈트 1%
- **PvP**: 던전 내 언제든 가능 (파티원 제외)
- **골드 스킬**: 스킬을 골드로 구매

### 종족 시스템
- **인간**: 모든 스탯 10 시작, 레벨당 모든 스탯 +1
- **엘프**: 마력/마방 특화, 마법 계열 스킬
- **수인**: 힘/민첩 특화, 물리 계열 스킬  
- **기계족**: 체력/방어 특화, 기술 계열 스킬

### 필수 구현 기능
1. 탑다운 뷰 이동 및 전투
2. 종족별 고정 스탯 성장
3. 골드 기반 스킬 학습 시스템
4. PvP 가능한 던전 시스템
5. 완전한 데스 페널티
6. 영혼 수집 및 상속 시스템
```

---

## 전체 시스템 개발 스펙

### 1. Player Controller ✅ (완료)

### 2. Character Creation System

```markdown
[Character] Creation System 구현 - 영혼 기반 새 캐릭터 시스템

**컨텍스트**:
- 관련 시스템: Soul, Stats, UI, Network
- 데이터 구조: CharacterData, SoulCollection
- 네트워킹: 캐릭터 생성 서버 검증
- 계정별 영혼 컬렉션 활용

**요구사항**:
1. **캐릭터 생성 UI**:
   - 종족 선택: 인간, 엘프, 수인, 기계족
   - 외모 커스터마이징: 색상, 스타일 등
   - 이름 입력: 중복 확인 시스템
   - 영혼 장착: 보유한 영혼 중 선택하여 미리 장착

2. **영혼 시스템 연동**:
   - 계정에 저장된 영혼 컬렉션 표시
   - 새 캐릭터에 영혼 미리 장착 가능
   - 최대 15개 영혼 장착 (레벨 제한 무시)
   - 영혼 효과는 1레벨부터 즉시 적용

3. **캐릭터 슬롯 관리**:
   - 계정당 최대 3개 캐릭터 슬롯
   - 사망한 캐릭터 슬롯은 즉시 비워짐
   - 빈 슬롯에 새 캐릭터 생성 가능

4. **신규 캐릭터 혜택**:
   - 기본 장비 지급 (최하급 무기/방어구)
   - 시작 골드 100골드
   - 기본 포션 5개 지급

**제약조건**:
- 영혼 외에는 아무것도 상속 불가
- 캐릭터 이름 중복 불가 (전체 서버)
- 종족 선택 후 변경 불가
- 영혼 장착 후 제거 불가

**파일 구조**:
```
Scripts/Character/
├── CharacterCreator.cs       # 캐릭터 생성 시스템
├── SoulInheritance.cs       # 영혼 상속 시스템
├── CharacterSlots.cs        # 캐릭터 슬롯 관리
└── NewbieSupport.cs         # 신규 캐릭터 지원
```
```

### 3. Stats System

```markdown
[Stats] System 구현 - 종족별 고정 성장 스탯 시스템

**컨텍스트**:
- 관련 시스템: Player, Combat, Items, Soul, Skills
- 데이터 구조: StatBlock struct, RaceGrowthData ScriptableObject
- 네트워킹: NetworkVariable로 실시간 스탯 동기화
- 종족별 고정 성장, 스탯 포인트 없음

**요구사항**:
1. **종족별 기본 스탯 & 성장**:
   - **인간**: 기본 모든 스탯 10, 레벨당 모든 스탯 +1 (균형)
   - **엘프**: 기본 STR 8/AGI 12/VIT 8/INT 15/DEF 7/MDEF 12/LUK 10
     레벨당 STR +0.5/AGI +1/VIT +0.5/INT +2/DEF +0.5/MDEF +1.5/LUK +1
   - **수인**: 기본 STR 15/AGI 13/VIT 12/INT 6/DEF 10/MDEF 6/LUK 8
     레벨당 STR +2/AGI +1.5/VIT +1.5/INT +0.5/DEF +1/MDEF +0.5/LUK +0.5
   - **기계족**: 기본 STR 10/AGI 7/VIT 15/INT 8/DEF 15/MDEF 10/LUK 5
     레벨당 STR +1/AGI +0.5/VIT +2/INT +1/DEF +2/MDEF +1.5/LUK +0.5

2. **자동 레벨업 시스템**:
   - 경험치 도달 시 자동 레벨업
   - 종족별 성장 스탯 자동 적용
   - 15레벨 최대, 그 이후 경험치 획득 불가

3. **스탯 계산 공식**:
   - STR: 물리 공격력 = STR * 2
   - AGI: 공격속도 = 1.0 + (AGI * 0.01), 이동속도 = 5.0 + (AGI * 0.1), 회피율 = AGI * 0.1%
   - VIT: 최대 HP = 100 + (VIT * 10), HP 재생 = VIT * 0.1/초
   - INT: 마법 공격력 = INT * 2, 최대 MP = 50 + (INT * 5)
   - DEF/MDEF: 피해 감소 = STAT / (STAT + 100) * 100%
   - LUK: 드롭률 증가 = LUK * 0.01%, 치명타 확률 = LUK * 0.05%

**제약조건**:
- 레벨업 시 스탯 선택권 없음 (종족별 고정)
- 영혼 시스템으로만 추가 스탯 증가 가능
- 모든 스탯 계산은 실시간 반영

**파일 구조**:
```
Scripts/Stats/
├── RaceGrowthData.cs         # 종족별 성장 데이터 SO
├── AutoLevelUp.cs           # 자동 레벨업 시스템
├── StatCalculator.cs         # 스탯 계산 로직
└── PlayerStats.cs           # 플레이어 스탯 관리
```
```

### 4. Skill System

```markdown
[Skill] System 구현 - 골드 기반 스킬 학습 시스템

**컨텍스트**:
- 관련 시스템: Stats, Combat, Economy, Player, Network
- 데이터 구조: SkillData ScriptableObject, SkillMaster NPC
- 네트워킹: 스킬 학습 서버 검증, 골드 차감
- 스킬 포인트 없음, 골드로 스킬 구매

**요구사항**:
1. **스킬 학습 시스템**:
   - 마을의 스킬 마스터 NPC에게서 골드로 스킬 구매
   - 레벨 요구사항 충족 시에만 학습 가능
   - 종족 내 모든 계열 스킬 학습 가능 (제한 없음)
   - 학습한 스킬은 영구적 (캐릭터 사망 시 모두 소실)

2. **레벨별 스킬 해금**:
   - **3레벨**: 1티어 스킬 해금 (기본 스킬들)
   - **6레벨**: 2티어 스킬 해금 (중급 스킬들)
   - **9레벨**: 3티어 스킬 해금 (고급 스킬들)
   - **12레벨**: 4티어 스킬 해금 (마스터 스킬들)
   - **15레벨**: 5티어 스킬 해금 (궁극기들)

3. **인간 스킬 트리 예시**:
   
   **전사계열**:
   - 1티어(3레벨): 강타(100골드), 방어 자세(150골드)
   - 2티어(6레벨): 돌진(500골드), 무기 숙련(700골드)
   - 3티어(9레벨): 광폭화(2000골드), 연속 공격(2500골드)
   - 4티어(12레벨): 전장의 지배자(8000골드), 불굴의 의지(10000골드)
   - 5티어(15레벨): 신화적 일격(50000골드)

   **성기사계열**:
   - 1티어(3레벨): 치유술(200골드), 신성한 빛(250골드)
   - 2티어(6레벨): 방어막(800골드), 정화술(600골드)
   - 3티어(9레벨): 신성한 분노(3000골드), 대치유술(2800골드)
   - 4티어(12레벨): 천사의 가호(12000골드), 심판의 망치(15000골드)
   - 5티어(15레벨): 신의 강림(80000골드)

4. **다른 종족 스킬 트리**:
   - 엘프: 원소마법, 순수마법, 자연마법, 정신마법
   - 수인: 광전사, 사냥꾼, 암살자, 야수
   - 기계족: 중장갑, 기술자, 포격수, 나노기술

**제약조건**:
- 스킬 마스터 NPC는 마을에만 존재
- 골드 부족 시 스킬 학습 불가
- 한 번 배운 스킬은 영구적 (레벨 업그레이드 없음)
- 캐릭터 사망 시 모든 스킬 소실

**파일 구조**:
```
Scripts/Skills/
├── SkillMaster.cs            # 스킬 마스터 NPC
├── SkillPurchase.cs         # 스킬 구매 시스템
├── SkillData.cs             # 스킬 데이터 SO
├── SkillEffects.cs          # 스킬 효과 구현
└── RaceSkills/              # 종족별 스킬
    ├── HumanSkills.cs
    ├── ElfSkills.cs
    ├── BeastSkills.cs
    └── MachinaSkills.cs
```
```

### 5. Death Penalty System

```markdown
[Death] Penalty System 구현 - 완전한 캐릭터 삭제 시스템

**컨텍스트**:
- 관련 시스템: Items, PvP, Monster, Character, Network
- 데이터 구조: DeathInfo, ItemDrop, CharacterDeletion
- 네트워킹: 사망 처리 서버 검증, 캐릭터 삭제
- 극한의 하드코어 - 죽으면 끝

**요구사항**:
1. **사망 시 처리**:
   - 착용 중인 모든 장비 즉시 드롭
   - 인벤토리 내 모든 아이템 드롭
   - 소지 골드 100% 드롭
   - 캐릭터 즉시 삭제 (복구 불가)

2. **아이템 드롭 시스템**:
   - 사망 위치에 아이템들이 흩어져서 드롭
   - 다른 플레이어들이 자유롭게 습득 가능
   - 드롭된 아이템은 1시간 후 자동 소멸
   - 희귀한 아이템일수록 더 멀리 흩어짐

3. **영혼 시스템만 계정 귀속**:
   - 획득한 영혼만 계정에 영구 보존
   - 새 캐릭터 생성 시 기존 영혼 사용 가능
   - 영혼 외에는 아무것도 이어지지 않음
   - 레벨, 스킬, 아이템 모두 처음부터

4. **캐릭터 삭제 처리**:
   - 사망 즉시 로그아웃 처리
   - 캐릭터 선택 화면으로 이동
   - 해당 캐릭터 슬롯 비워짐
   - 새 캐릭터 생성 필요

**제약조건**:
- 영혼을 제외한 모든 진행도 소실
- 캐릭터 복구 시스템 없음
- 사망 후 해당 던전 재입장 불가 (새 캐릭터로도)
- 파티원도 사망한 플레이어 도울 수 없음

**파일 구조**:
```
Scripts/Death/
├── DeathManager.cs           # 사망 처리 관리
├── CharacterDeletion.cs     # 캐릭터 삭제 시스템
├── ItemScatter.cs           # 아이템 흩뿌리기
├── SoulPreservation.cs      # 영혼 보존 시스템
└── DeathLog.cs              # 사망 기록 (통계용)
```
```

### 6. Combat System

```markdown
[Combat] System 구현 - 실시간 전투 및 피해 계산 시스템

**컨텍스트**:
- 관련 시스템: Player, Stats, Items, Network, PvP
- 데이터 구조: DamageInfo struct, CombatStats
- 네트워킹: 공격/피해는 서버 검증, 결과만 클라이언트 동기화
- 탑다운 실시간 액션 전투

**요구사항**:
1. **공격 시스템**:
   - 기본 공격: 무기 데미지 + STR 보너스
   - 마법 공격: 스킬 데미지 + INT 보너스
   - 속성 공격: 기본 데미지 + 속성 보너스%
   - 치명타: LUK 기반 확률로 데미지 2배

2. **방어 시스템**:
   - 물리 방어: DEF 기반 퍼센트 감소
   - 마법 방어: MDEF 기반 퍼센트 감소
   - 속성 저항: 해당 속성 피해만 감소
   - 회피: AGI 기반 확률로 데미지 0

3. **피해 계산 공식**:
   ```
   최종 피해 = (기본 데미지 + 스탯 보너스) * 속성 보너스 * 치명타 배수 * (1 - 방어율) * (1 - 속성 저항)
   ```

4. **PvP vs PvE 공통 적용**:
   - 플레이어 vs 몬스터와 동일한 전투 메커니즘
   - 모든 스킬과 아이템 사용 가능
   - 치명타, 상태효과 등 모든 전투 요소 적용

**제약조건**:
- 모든 피해 계산은 서버에서 검증
- 클라이언트는 시각적 피드백만 즉시 표시
- 초당 최대 공격 횟수 제한 (스팸 방지)
- 16명 동시 전투 시에도 60fps 유지

**파일 구조**:
```
Scripts/Combat/
├── CombatSystem.cs           # 전투 시스템 매니저
├── DamageCalculator.cs       # 피해 계산 로직
├── StatusEffect.cs           # 상태 효과 시스템
├── WeaponController.cs       # 무기 제어
└── ProjectileController.cs   # 투사체 제어
```
```

### 7. PvP System

```markdown
[PvP] System 구현 - 던전 내 플레이어 대 플레이어 전투

**컨텍스트**:
- 관련 시스템: Combat, Party, Death, Items, Network
- 데이터 구조: PvPState, KillRecord
- 네트워킹: PvP 액션 서버 검증 필수
- 던전 내에서만 PvP 가능

**요구사항**:
1. **PvP 활성화 조건**:
   - 던전 내부에서만 PvP 가능
   - 마을/안전지대에서는 PvP 불가
   - 파티원 간에는 PvP 불가
   - 레벨 차이 제한 없음 (하드코어)

2. **PvP 전투 시스템**:
   - 몬스터 vs 플레이어와 동일한 전투 메커니즘
   - 모든 스킬과 아이템 사용 가능
   - 치명타, 상태효과 등 모든 전투 요소 적용
   - 도망/회피 가능 (강제 전투 아님)

3. **킬/데스 시스템**:
   - 플레이어 킬 시 경험치 보너스 (죽은 플레이어 레벨 * 100)
   - 킬 카운트 기록 (개인 통계)
   - 킬 스트릭 시스템 (연속 킬)
   - 복수 시스템 (킬러 표시)

4. **아이템 루팅**:
   - 킬러가 우선 습득권 (10초간)
   - 이후 다른 플레이어도 습득 가능
   - 사망한 플레이어는 모든 아이템 드롭

**제약조건**:
- 모든 PvP 액션은 서버 검증
- PvP 중에도 몬스터 공격 가능
- 안전지대 도달 시 PvP 즉시 중단
- 접속 종료로 PvP 회피 시 페널티

**파일 구조**:
```
Scripts/PvP/
├── PvPManager.cs             # PvP 시스템 관리
├── PvPCombat.cs             # PvP 전투 로직
├── KillTracker.cs           # 킬/데스 기록
└── PvPSafeZone.cs           # 안전지대 관리
```
```

### 8. Dungeon System

```markdown
[Dungeon] System 구현 - PvP 가능한 던전 시스템

**컨텍스트**:
- 관련 시스템: Network, Monster, Items, Party, PvP, Death
- 데이터 구조: DungeonInstance, SpawnPoint
- 네트워킹: 서버에서 던전 인스턴스 관리
- 층별 파티 인원은 권장사항, 강제 아님

**요구사항**:
1. **던전 인스턴스 시스템**:
   - 각 던전은 독립된 인스턴스
   - 최대 50명까지 동시 입장 가능
   - 입장 시 1층 랜덤 위치에 스폰
   - 파티는 같은 위치에 스폰

2. **층별 권장 인원** (강제 아님):
   - 1-2층: 솔로 가능
   - 3-4층: 2인 이상 권장 (경고 메시지만)
   - 5-6층: 4인 이상 권장
   - 7-8층: 8인 이상 권장
   - 9-10층: 16인 이상 권장

3. **던전 내 시스템**:
   - PvP 항상 활성화 (파티원 제외)
   - 몬스터 리스폰 시간: 5-10분
   - 보스는 일정 시간 후 리스폰
   - 층간 이동은 특정 포탈/계단 이용

4. **던전 퇴장 조건**:
   - 수동 퇴장: 언제든 가능 (1층에서만)
   - 사망 시 자동 퇴장
   - 파티원 전체 퇴장 시 함께 퇴장
   - 재입장 쿨타임: 1시간

**제약조건**:
- 던전 내에서는 귀환 주문/아이템 사용 불가
- 층간 이동 시 파티원 모두 함께 이동
- 인스턴스 최대 유지 시간: 6시간
- 던전 내 세이브 불가 (퇴장 시에만 저장)

**파일 구조**:
```
Scripts/Dungeon/
├── DungeonInstance.cs        # 던전 인스턴스 관리
├── DungeonSpawner.cs        # 스폰 시스템
├── DungeonEntrance.cs       # 입장/퇴장 관리
└── FloorTransition.cs       # 층간 이동 시스템
```
```

### 9. Economy System

```markdown
[Economy] System 구현 - 스킬 중심 골드 경제 시스템

**컨텍스트**:
- 관련 시스템: Skills, Dungeon, Items, Death, Network
- 데이터 구조: EconomyData ScriptableObject, PlayerWallet
- 네트워킹: 골드 거래 서버 검증
- 스킬 구매가 주요 골드 소모처

**요구사항**:
1. **골드 획득 시스템**:
   - 몬스터 처치: 층별로 골드량 기하급수적 증가
     - 1층: 1~5골드
     - 2층: 3~10골드
     - 3층: 8~25골드
     - 4층: 20~60골드
     - 5층: 50~150골드
     - 6층: 120~350골드
     - 7층: 300~800골드
     - 8층: 700~2000골드
     - 9층: 1500~5000골드
     - 10층: 3000~10000골드
   - 보스 처치: 해당 층 일반 몬스터의 20배
   - 보물상자: 층별 고정 골드 + 보너스
   - PvP 킬: 상대방이 소지한 골드의 30%

2. **주요 골드 소모처**:
   - **스킬 학습**: 최대 소모처 (15레벨 궁극기 50000~160000골드)
   - **기본 장비 구매**: 레벨별 기본 성능 장비
   - **소모품 구매**: 포션, 스크롤 등
   - **장비 수리**: 내구도 시스템
   - **귀환 비용**: 매 귀환 시 계단식 상승

3. **귀환 비용 시스템**:
   - 첫 귀환: 100골드
   - 이후 귀환: 이전 비용 * 1.5
   - 귀환 비용 부족 시: 던전에서 나갈 수 없음 (사실상 사망 확정)
   - 던전 클리어 시: 귀환 비용 초기화

4. **골드 밸런싱**:
   - 초반(1-5레벨): 기본 장비 구매와 1-2티어 스킬에 집중
   - 중반(6-10레벨): 3-4티어 스킬 구매를 위한 골드 파밍
   - 후반(11-15레벨): 궁극기 스킬 구매를 위한 대량 골드 필요
   - 사망 시 모든 골드 소실로 극한의 긴장감

**제약조건**:
- 모든 골드 거래는 서버 검증 필수
- 골드 복사 버그 방지 시스템
- 사망 시 소지 골드 100% 드롭
- 골드 거래/선물 시스템 없음

**파일 구조**:
```
Scripts/Economy/
├── GoldManager.cs            # 골드 관리 시스템
├── SkillEconomy.cs          # 스킬 구매 경제
├── RecallCost.cs            # 귀환 비용
└── DeathGoldDrop.cs         # 사망 시 골드 드롭
```
```

### 10. Party System

```markdown
[Party] System 구현 - 던전 내 파티 시스템 (버프 없음)

**컨텍스트**:
- 관련 시스템: Network, Dungeon, PvP, Spawn
- 데이터 구조: PartyData, PartyMember
- 네트워킹: 파티 상태 실시간 동기화
- 던전 내에서도 파티 결성/해체 가능

**요구사항**:
1. **파티 생성/관리**:
   - 던전 밖/안 어디서든 파티 생성 가능
   - 파티 초대: 파티장만 초대 권한
   - 파티 탈퇴: 언제든 자유롭게 탈퇴
   - 파티 해체: 파티장이 해체 또는 모든 멤버 탈퇴 시

2. **파티 기능**:
   - 파티원 위치 표시 (미니맵에 다른 색으로)
   - 파티 채팅 시스템
   - 파티원 HP/MP 상태 표시
   - 파티원에게는 PK 불가 (안전 시스템)

3. **던전 스폰 시스템**:
   - **솔로 입장**: 1층 랜덤 위치에 스폰
   - **파티 입장**: 파티원 모두 같은 위치에 스폰
   - 던전 내 파티 결성 시: 기존 위치 유지
   - 파티 해체 시: 기존 위치 유지

4. **파티 vs PK 시스템**:
   - 파티원 간에는 PK 불가
   - 파티 vs 파티 PK 가능
   - 파티 vs 솔로 PK 가능
   - 파티원이 죽으면 파티에서 자동 제명

**제약조건**:
- 파티 버프 효과 없음 (순수 협동만)
- 최대 16명까지 파티 가능
- 던전 층 이동 시 파티원 모두 함께 이동
- 파티원 중 한 명이라도 던전 나가면 전체 파티 던전 퇴장

**파일 구조**:
```
Scripts/Party/
├── PartyManager.cs           # 파티 관리 시스템
├── PartySpawner.cs          # 파티 스폰 시스템
├── PartyPvPManager.cs       # 파티 vs PK 관리
└── PartyUI.cs               # 파티 UI 관리
```
```

### 11. Soul System

```markdown
[Soul] System 구현 - 0.1% 드롭률 하드코어 영혼 시스템

**컨텍스트**:
- 관련 시스템: Stats, Combat, Items, Network, Character, Death
- 데이터 구조: SoulData ScriptableObject, SoulSlot
- 네트워킹: 영혼 획득/장착 서버 검증 및 저장
- 유일한 계정 귀속 영구 진행도

**요구사항**:
1. **영혼 드롭 시스템**:
   - 모든 몬스터에서 0.1% (1/1000) 확률로 드롭
   - LUK 스탯으로 드롭률 증가 (LUK * 0.01%)
   - 보스는 드롭률 동일하지만 고유 영혼 존재

2. **영혼 슬롯 시스템**:
   - 레벨당 1개 슬롯 (최대 15개)
   - 한번 장착하면 제거 불가
   - 동일한 영혼 중복 장착 불가
   - 새 캐릭터 생성 시 레벨 제한 무시하고 장착 가능

3. **영혼 효과**:
   - 기본형: 단일 스탯 +1~3 영구 증가
   - 특수형: 스탯 + 특수 효과 (드롭률 증가, 속성 저항 등)
   - 보스형: 고유 특수 능력 (스킬 효과, 패시브 등)

4. **영혼 등급**:
   - 일반: 스탯 +1
   - 희귀: 스탯 +2
   - 영웅: 스탯 +3
   - 전설: 스탯 +3 + 특수 효과
   - 보스: 고유 능력

5. **하드코어 영혼 상속 시스템**:
   - **사망 시**: 보유한 영혼 중 **단 하나만** 선택하여 계정에 보존
   - **나머지 영혼**: 모두 완전히 삭제 (복구 불가)
   - **영혼 선택 UI**: 사망 시 어떤 영혼을 보존할지 선택
   - **새 캐릭터 생성**: 보존된 영혼을 상속할지 말지 선택
   - **상속 시**: 선택한 영혼 하나만 새 캐릭터에 장착
   - **상속 안함**: 완전 초기화, 영혼도 삭제

**제약조건**:
- 영혼 데이터는 서버에 영구 저장
- 최대 소지 가능 영혼 수 제한 없음
- 영혼만이 유일한 영구 진행도
- 영혼 효과는 즉시 적용

**파일 구조**:
```
Scripts/Soul/
├── SoulData.cs               # 영혼 데이터 SO
├── SoulManager.cs            # 영혼 관리 시스템
├── SoulSlot.cs              # 영혼 슬롯
├── SoulDropper.cs           # 영혼 드롭 로직
├── SoulEffects.cs           # 영혼 효과 구현
└── AccountSoulStorage.cs     # 계정 영혼 저장
```
```

### 12. Item System

```markdown
[Item] System 구현 - 5등급 아이템 및 장비 시스템

**컨텍스트**:
- 관련 시스템: Stats, Combat, Inventory, Network, Death
- 데이터 구조: ItemData ScriptableObject, Equipment, ItemRarity enum
- 네트워킹: 아이템 획득/장착 서버 검증
- 드롭률: 일반 70%, 희귀 20%, 영웅 7%, 전설 2.5%, 신화 0.5%

**요구사항**:
1. **아이템 등급 시스템**:
   - 일반(White): 기본 스탯만
   - 희귀(Blue): 기본 + 추가 옵션 1-2개
   - 영웅(Purple): 기본 + 추가 옵션 3-4개
   - 전설(Orange): 기본 + 추가 옵션 5-6개 + 특수 효과
   - 신화(Red): 세트 효과 + 고유 스킬

2. **장비 슬롯**:
   - 무기: 공격력, 공격속도, 속성 데미지
   - 방어구: 방어력, 체력, 속성 저항
   - 장신구: 특수 효과, 스탯 보너스

3. **아이템 생성 시스템**:
   - 기본 스탯은 레벨 대비 고정 범위
   - 추가 옵션은 랜덤 스탯 + 랜덤 수치
   - 레벨별 아이템 티어 구분

4. **사망 시 아이템 드롭**:
   - 착용 장비 모두 드롭
   - 인벤토리 아이템 모두 드롭
   - 다른 플레이어가 습득 가능
   - 1시간 후 자동 소멸

**제약조건**:
- 아이템 ID는 서버에서 생성하여 중복 방지
- 모든 아이템 변경은 서버 검증 후 적용
- 인벤토리 최대 용량 100개
- 아이템 스택 시스템 (소모품만)

**파일 구조**:
```
Scripts/Items/
├── ItemData.cs               # 아이템 데이터 SO
├── ItemGenerator.cs          # 아이템 생성 로직
├── Equipment.cs              # 장비 시스템
├── Inventory.cs              # 인벤토리 관리
├── ItemDropper.cs           # 아이템 드롭 시스템
└── DeathItemDrop.cs         # 사망 시 아이템 드롭
```
```

### 13. Enchant System

```markdown
[Enchant] System 구현 - 1% 드롭률 무기 강화 시스템

**컨텍스트**:
- 관련 시스템: Items, Combat, Network
- 데이터 구조: EnchantData ScriptableObject, WeaponEnchant
- 네트워킹: 인챈트 적용 서버 검증
- 무기에만 적용 가능한 특수 속성

**요구사항**:
1. **인챈트 드롭 시스템**:
   - 모든 몬스터에서 1% (1/100) 확률로 드롭
   - LUK 스탯으로 드롭률 증가 가능
   - 층별로 다른 인챈트 종류 드롭

2. **인챈트 종류**:
   - 속성 부여: 화염, 냉기, 번개, 독, 암흑, 신성
   - 특수 효과: 생명력 흡수, 마나 흡수, 관통, 연쇄 공격
   - 상태 효과: 독성, 빙결, 마비, 화상 추가

3. **인챈트 적용 규칙**:
   - 무기당 최대 3개 인챈트 적용 가능
   - 동일한 인챈트 중복 적용 불가
   - 인챈트 제거 시 인챈트 아이템 소실

4. **인챈트 효과**:
   - 속성 부여: 무기 데미지의 25% 추가 속성 피해
   - 생명력 흡수: 입힌 피해의 10% HP 회복
   - 관통: 방어력 무시 확률 15%

**제약조건**:
- 인챈트는 소모 아이템 (1회 사용)
- 인챈트 적용 실패 확률 없음 (100% 성공)
- 인챈트된 무기는 거래 가능
- 고급 인챈트는 높은 층에서만 드롭

**파일 구조**:
```
Scripts/Enchant/
├── EnchantData.cs            # 인챈트 데이터 SO
├── EnchantManager.cs         # 인챈트 관리
├── WeaponEnchant.cs         # 무기 인챈트 적용
└── EnchantEffects.cs        # 인챈트 효과 구현
```
```

### 14. Monster AI System

```markdown
[Monster] AI System 구현 - 층별 차별화된 몬스터 AI

**컨텍스트**:
- 관련 시스템: Combat, Stats, Dungeon, Network
- 데이터 구조: MonsterData ScriptableObject, AIBehavior
- 네트워킹: 서버에서 AI 연산, 클라이언트는 동기화만
- 층별 난이도 급상승 구현

**요구사항**:
1. **기본 AI 패턴**:
   - 감지: 플레이어 감지 범위 설정
   - 추적: A* 알고리즘으로 최적 경로 탐색
   - 공격: 사거리 내 플레이어 공격
   - 순찰: 기본 순찰 경로 이동

2. **층별 AI 복잡도**:
   - 1-2층: 단순 추적 공격
   - 3-4층: 그룹 행동, 포위 전술
   - 5-6층: 스킬 사용, 상태 효과 공격
   - 7-8층: 협동 공격, 역할 분담
   - 9-10층: 고도의 전술, 환경 활용

3. **보스 AI**:
   - 다단계 패턴 (HP 구간별 패턴 변화)
   - 광역 공격 스킬
   - 소환 패턴 (추가 몬스터 소환)
   - 무적 페이즈 (특정 조건 달성 필요)

4. **PvP 고려 AI**:
   - 몬스터는 가장 가까운 플레이어 우선 공격
   - 플레이어가 PvP 중이어도 몬스터는 개입
   - 보스는 어그로 시스템으로 타겟 관리

**제약조건**:
- AI 연산 최적화로 16명 동시 플레이 지원
- 몬스터별 행동 패턴 예측 가능성 유지
- 플레이어 스킬에 대한 적절한 대응
- 렉 없는 부드러운 AI 움직임

**파일 구조**:
```
Scripts/Monster/
├── MonsterAI.cs              # AI 기본 로직
├── MonsterData.cs           # 몬스터 데이터 SO
├── BossAI.cs                # 보스 전용 AI
├── AIBehaviorTree.cs        # 행동 트리 시스템
└── MonsterSpawner.cs        # 몬스터 스포너
```
```

### 15. Network System

```markdown
[Network] System 구현 - Unity Netcode 기반 멀티플레이어

**컨텍스트**:
- 관련 시스템: 모든 게임 시스템
- 데이터 구조: NetworkBehaviour, NetworkVariable, RPC
- 네트워킹: Unity Netcode for GameObjects
- 최대 50명 동시 플레이 지원

**요구사항**:
1. **연결 관리**:
   - 서버-클라이언트 연결 관리
   - 클라이언트 연결/해제 처리
   - 재연결 시스템 (끊김 복구)
   - 네트워크 상태 모니터링

2. **데이터 동기화**:
   - 플레이어 위치/회전 동기화
   - 스탯/체력 실시간 동기화
   - 아이템/인벤토리 상태 동기화
   - 던전 상태 동기화

3. **RPC 시스템**:
   - 공격/스킬 사용 RPC
   - 아이템 획득/사용 RPC
   - 채팅 메시지 RPC
   - 파티 관련 RPC

4. **보안 및 검증**:
   - 서버 권한 검증 (치트 방지)
   - 패킷 검증 시스템
   - 속도핵 방지
   - 아이템 복사 방지

**제약조건**:
- 60fps 유지를 위한 네트워크 최적화
- 패킷 크기 최소화
- 대역폭 사용량 최적화
- 네트워크 지연 보상

**파일 구조**:
```
Scripts/Network/
├── NetworkManager.cs         # 네트워크 매니저
├── NetworkPlayer.cs         # 네트워크 플레이어
├── NetworkData.cs           # 네트워크 데이터 구조
├── AntiCheat.cs             # 치트 방지 시스템
└── NetworkOptimizer.cs      # 네트워크 최적화
```
```

### 16. UI System

```markdown
[UI] System 구현 - 게임 전체 UI 시스템

**컨텍스트**:
- 관련 시스템: 모든 게임 시스템
- 데이터 구조: UI Panel 기반 구조
- 네트워킹: UI 상태 동기화 최소화
- 50명 멀티플레이어 환경 고려

**요구사항**:
1. **메인 HUD**:
   - HP/MP 바 (실시간 업데이트)
   - 미니맵 (플레이어, 파티원, 몬스터 위치)
   - 스킬 쿨다운 표시
   - 경험치 바

2. **인벤토리 시스템**:
   - 100슬롯 그리드 인벤토리
   - 아이템 드래그 앤 드롭
   - 아이템 정보 툴팁
   - 장비 착용 슬롯

3. **스탯 창**:
   - 7종 기본 스탯 표시
   - 6대 속성 스탯 표시
   - 영혼 슬롯 표시
   - 레벨업 시 자동 열림

4. **파티 UI**:
   - 파티원 HP/MP 표시
   - 파티원 위치 표시
   - 파티 채팅 창
   - 파티 관리 UI

5. **스킬 구매 UI**:
   - 스킬 마스터 NPC 상호작용
   - 종족별 스킬 트리 표시
   - 스킬 비용 및 요구 레벨 표시
   - 골드 부족 시 경고

**제약조건**:
- 60fps 유지를 위한 UI 최적화
- 다양한 해상도 지원 (UI 스케일링)
- 키보드 단축키 지원
- 접근성 고려

**파일 구조**:
```
Scripts/UI/
├── UIManager.cs              # UI 전체 관리
├── HUDController.cs         # 메인 HUD
├── InventoryUI.cs           # 인벤토리 UI
├── StatsUI.cs               # 스탯 창 UI
├── PartyUI.cs               # 파티 UI
├── SkillShopUI.cs           # 스킬 구매 UI
└── DeathUI.cs               # 사망 처리 UI
```
```

### 17. Save System

```markdown
[Save] System 구현 - 영혼 중심 데이터 저장 시스템

**컨텍스트**:
- 관련 시스템: Soul, Character, Account, Network
- 데이터 구조: AccountData, SoulCollection
- 네트워킹: 서버 저장 + 로컬 백업
- 영혼만 계정 귀속, 나머지는 캐릭터별

**요구사항**:
1. **계정 데이터 저장**:
   - 영혼 컬렉션 (영구 보존)
   - 계정 설정 정보
   - 전체 게임 통계

2. **캐릭터 데이터 저장**:
   - 현재 캐릭터 정보 (레벨, 스탯, 스킬)
   - 인벤토리 및 장착 아이템
   - 현재 위치 및 던전 상태

3. **저장 방식**:
   - 서버 저장 (메인)
   - 로컬 저장 (백업)
   - 자동 저장 (던전 퇴장 시)
   - 수동 저장 (안전 지역)

4. **사망 처리**:
   - 캐릭터 데이터 즉시 삭제
   - 영혼 데이터는 계정에 보존
   - 사망 기록 통계 저장

**제약조건**:
- 저장 데이터 크기 최적화
- 저장/로드 속도 최적화
- 데이터 손실 방지
- 멀티플랫폼 호환성

**파일 구조**:
```
Scripts/Save/
├── SaveManager.cs            # 저장 시스템 관리
├── AccountData.cs           # 계정 데이터 구조
├── CharacterData.cs         # 캐릭터 데이터 구조
├── SoulStorage.cs           # 영혼 저장 관리
└── SaveEncryption.cs        # 데이터 암호화
```
```

---